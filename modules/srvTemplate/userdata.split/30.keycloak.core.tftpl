#!/bin/bash

DBNAME="${dbname}"
DBLOGIN="${dblogin}"
DBPASSWORD="${dbpassword}"
SYSUSER="${sysuser}"
SYSGROUP="${sysgroup}"
SERVICEDNSNAME="${servicednsname}"
KCADMIN="${kcadmin}"
KCADMINPASSWD="${kcadminpassword}"

#local variable
# get ip addresse from the one who can go out
IPADDR=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')



# -qq -o=Dpkg::Use-Pty=0 # option to make apt less verbose -qq for apt and -o=dpkg for apt forking to dpkg to install package
DEBIAN_FRONTEND=noninteractive
echo "update source list"
apt-get -qq -o=Dpkg::Use-Pty=0 update

echo "### Keyclock autoinstallation ###"
echo "installation of requirements"
echo "postgresql installation"
apt-get -qq -o=Dpkg::Use-Pty=0 install -y postgresql postgresql-contrib

echo "postgresql"
systemctl stop postgresql.service

echo "nginx"
apt-get -qq -o=Dpkg::Use-Pty=0 install -y nginx

#setup nginx
echo "setup nginx"
unlink /etc/nginx/sites-enabled/default

mkdir /etc/nginx/certificate
cd /etc/nginx/certificate
openssl req -new -subj "/C=FR/ST=IDF/L=TM/O=keycloack/OU=Unknown/CN=$IPADDR" -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out nginx-certificate.crt -keyout nginx.key

cat > /etc/nginx/sites-available/keycloak-reverse-proxy.conf << EOF
server {
    listen 80;

    server_name _;
    return 301 https://\$host\$request_uri;
    }

server {
 
    include       /etc/nginx/mime.types;
   
    listen 443 ssl;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_certificate  /etc/nginx/certificate/nginx-certificate.crt;
    ssl_certificate_key /etc/nginx/certificate/nginx.key;

    proxy_set_header X-Forwarded-For \$proxy_protocol_addr; # To forward the original client's IP address 
    proxy_set_header X-Forwarded-Proto \$scheme; # to forward the  original protocol (HTTP or HTTPS)
    proxy_set_header Host \$host; # to forward the original host requested by the client

    #location / {  
    #  root   /data/www; 
    #  try_files \$uri \$uri/ /index.html;      #to support in app routing in SPA
    #}
    
    #location /auth {
    #  proxy_pass http://127.0.0.1:8080;
    #}

    #location /welcome {
    #  proxy_pass http://127.0.0.1:8080;
    #}

    #location /admin {
    #  proxy_pass http://127.0.0.1:8080;
    #}

    #location /js {
    #  proxy_pass http://127.0.0.1:8080;
    #}


    
    location / {
      proxy_pass http://127.0.0.1:8080;
      }
    
    }

EOF

ln -s /etc/nginx/sites-available/keycloak-reverse-proxy.conf /etc/nginx/sites-enabled/keycloak-reverse-proxy.conf

service ngnix restart

echo "postgresql setup"
#grab postgresql version a bit clumsy but did the job : 
PGVERSION=`psql --version | cut -d" " -f3| cut -d"." -f1`
echo password_encryption = scram-sha-256 >> /etc/postgresql/$${PGVERSION}/main/postgresql.conf

echo "local    $DBNAME     $DBLOGIN    scram-sha-256" >> /etc/postgresql/$${PGVERSION}/main/pg_hba.conf

echo "start postgresql service"
systemctl start postgresql.service

echo "role creation for keycloak"
su postgres <<EOF
psql -c "CREATE ROLE $DBLOGIN WITH LOGIN PASSWORD '$DBPASSWORD';"
EOF

echo "database creation"
su postgres <<EOF
psql -c "CREATE DATABASE $DBNAME WITH OWNER $DBLOGIN;"
EOF


apt-get -qq -o=Dpkg::Use-Pty=0 install -y default-jre

tmp_dir=$(mktemp -d -t keycloak-XXXXXX)
cd "$${tmp_dir}"

for file in `curl -s https://api.github.com/repos/keycloak/keycloak/releases/latest| grep browser_download_url |cut -d'"' -f4 | grep -iE "keycloak-[0-9]" | grep -i tar.gz`;
do
        wget -nv $file
done

echo `cat *.sha1` keycloak-*.tar.gz | sha1sum -c -
if [ $? -eq 0 ]
then
        tar zxvf keycloak-*.tar.gz -C /opt
else
        echo "keycloak signature error"
        exit 1
fi

ln -s /opt/keycloak-* /opt/keycloak

echo "create keycloak group and user"
groupadd -g 6001 --system $SYSGROUP
useradd \
   -g 6001 \
   -u 6001 \
   --system \
   --shell /sbin/nologin \
   --home /opt/keycloak \
   $SYSUSER

echo "fix permission"
chown --recursive keycloak. /opt/keycloak*
chmod o+x /opt/keycloak/bin

#keytool -genkeypair -alias localhost -keyalg RSA -keysize 2048 -validity 365 -keystore server.keystore -dname "cn=Server Administrator,o=Acme,c=GB" -keypass secret -storepass secret

#mkdir /root/conf/
#cp server.keystore /root/conf/

#echo "db-url=jdbc:postgresql://localhost/keycloakdb" >> /opt/keycloak/conf/keycloak.conf
echo "proxy=edge" >> /opt/keycloak/conf/keycloak.conf

echo "db-url-host=127.0.0.1" >> /opt/keycloak/conf/keycloak.conf
echo "db-url-database=$DBNAME" >> /opt/keycloak/conf/keycloak.conf
echo "db-username=$DBLOGIN" >> /opt/keycloak/conf/keycloak.conf
echo "db-password=$DBPASSWORD" >> /opt/keycloak/conf/keycloak.conf
# #echo "db.schema=keycloakdb" >> /opt/keycloak/conf/keycloak.conf
# #echo "https-key-store-password=secret" >> /opt/keycloak/conf/keycloak.conf
# echo "spi-x509cert-lookup-nginx-ssl-client-cert=SSL_CLIENT_CERT" >> /opt/keycloak/conf/keycloak.conf
# echo "spi-x509cert-lookup-nginx-ssl-cert-chain-prefix=CERT_CHAIN" >> /opt/keycloak/conf/keycloak.conf
# echo "spi-x509cert-lookup-nginx-certificate-chain-length=10" >> /opt/keycloak/conf/keycloak.conf
echo "hostname-url=https://192.168.254.207/" >> /opt/keycloak/conf/keycloak.conf

su - keycloak -s /bin/bash <<EOF
cd /opt/keycloak/bin/
export KEYCLOAK_ADMIN=$KCADMIN
export KEYCLOAK_ADMIN_PASSWORD=$KCADMINPASSWD
./kc.sh build --db postgres --spi-x509cert-lookup-provider=nginx
timeout -sHUP 1m ./kc.sh -cf /opt/keycloak/conf/keycloak.conf start --spi-x509cert-lookup-nginx-ssl-client-cert=SSL_CLIENT_CERT --spi-x509cert-lookup-nginx-ssl-cert-chain-prefix=CERT_CHAIN --spi-x509cert-lookup-nginx-certificate-chain-length=10
EOF

mkdir /etc/sysconfig
touch /etc/sysconfig/keycloak

cat > /etc/sysconfig/keycloak << EOF
#KC_DB_URL_HOST=127.0.0.1
#KC_DB_USERNAME=$DBLOGIN
#KC_DB_PASSWORD=$DBPASSWORD
#KC_DB_URL_DATABASE=$DBNAME 
#KC_DB=postgres 
KC_HTTP_HOST=127.0.0.1 
#KC_HOSTNAME_URL=https://192.168.254.207
#KC_PROXY=edge
#KEYCLOAK_ADMIN=$KCADMIN
#KEYCLOAK_ADMIN_PASSWORD=$KCADMINPASSWD
EOF

cat > /etc/systemd/system/keycloak.service << EOF
[Unit]
Description=Keycloak Server
After=network.target

[Service]
Type=simple
#user and group
User=keycloak
Group=keycloak
#non sensible variable
EnvironmentFile=-/etc/sysconfig/keycloak
PIDFile=/run/keycloak.pid
UMask=0007

#--log={{ keycloak_quarkus_log }}
WorkingDirectory=/opt/keycloak
PrivateUsers=true

ReadWritePaths=/opt/keycloak/conf /opt/keycloak/data /opt/keycloak/lib/quarkus

ExecStart=/opt/keycloak/bin/kc.sh -cf /opt/keycloak/conf/keycloak.conf  start --optimized --spi-x509cert-lookup-nginx-ssl-client-cert=SSL_CLIENT_CERT --spi-x509cert-lookup-nginx-ssl-cert-chain-prefix=CERT_CHAIN --spi-x509cert-lookup-nginx-certificate-chain-length=10 

# Disable timeout logic and wait until process is stopped
TimeoutStopSec=0
# SIGTERM signal is used to stop the Java process
KillSignal=SIGTERM
# Send the signal only to the JVM rather than its control group
KillMode=process
# Java process is never killed
SendSIGKILL=no
# When a JVM receives a SIGTERM signal it exits with code 143
SuccessExitStatus=0 143

# Make sure that the service has its own unshared tmpfs at /tmp and that it
# cannot see or change any real devices
PrivateTmp=true
PrivateDevices=true

# We give no capabilities to a service by default
CapabilityBoundingSet=
AmbientCapabilities=

# Protect the following from modification:
# - The entire filesystem
# - sysctl settings and loaded kernel modules
# - No modifications allowed to Control Groups
# - Hostname
# - System Clock
ProtectSystem=strict
ProtectKernelTunables=true
ProtectKernelModules=true
ProtectControlGroups=true
ProtectClock=true
ProtectHostname=true

# Prevent access to the following:
# - /home directory
# - Kernel logs
ProtectHome=tmpfs

# Make sure that the process can only see PIDs and process details of itself,
# and the second option disables seeing details of things like system load and
# I/O etc
ProtectProc=invisible
ProcSubset=pid

# While not needed, we set these options explicitly
# - This process has been given access to the host network
# - It can also communicate with any IP Address
PrivateNetwork=false
RestrictAddressFamilies=AF_INET
IPAddressDeny=any
IPAddressAllow=localhost
IPAddressAllow=192.168.254.207
PrivateNetwork=false

# Restrict system calls to a sane bunch
SystemCallArchitectures=native
SystemCallFilter=@system-service
SystemCallFilter=~@privileged @resources @obsolete

# Misc restrictions
# - Since the process is a python process it needs to be able to write and
#   execute memory regions
RestrictSUIDSGID=true
RemoveIPC=true
NoNewPrivileges=true
RestrictRealtime=true
RestrictNamespaces=true
LockPersonality=true
PrivateUsers=strict
MemoryDenyWriteExecute=false

LimitMEMLOCK=640000000
LimitNOFILE=65535
DevicePolicy=closed

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl daemon-reexec
systemctl enable keycloak
