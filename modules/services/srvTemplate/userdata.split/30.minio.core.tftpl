#!/bin/sh


SERVICEDNSNAME="${servicednsname}"
SYSUSER="${sysuser}"
SYSGROUP="${sysgroup}"

ACMEPKI="${acmepki}"
ROOTCAFINGERPRINT="${rootcafingerprint}"
CA_SSHCLIENT_PUBKEY="${ca_ssh_client_pubkey}"
PROVISIONERPASS="${provisionerpassword}"
PROVISIONERNAME="${provisionername}"

MINIO_ROOT_USER="${minio_rootusr}"
MINIO_ROOT_PASSWORD="${minio_rootpassword}"
MINIO_DATA_PARTITON_MOUNT="/srv/minio"
MINIO_DATA_PATH="$${MINIO_DATA_PARTITON_MOUNT}/data"

#local variable
# get ip addresse from the one who can go out
IPADDR=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')



#create minio data partition
parted -s -a optimal -- /dev/sdb mklabel gpt
parted -s -a optimal -- /dev/sdb mkpart primary 0% 100%
parted -s -- /dev/sdb align-check optimal 1
pvcreate /dev/sdb1
vgcreate vgdata /dev/sdb1
lvcreate -n minio_data -l +100%FREE vgdata
mkfs.ext4 /dev/vgdata/minio_data
mkdir -p $MINIO_DATA_PARTITON_MOUNT
echo "/dev/vgdata/minio_data $${MINIO_DATA_PARTITON_MOUNT} ext4 defaults 0 0" | sudo tee -a /etc/fstab
mount -av
mkdir -p $MINIO_DATA_PATH




# -qq -o=Dpkg::Use-Pty=0 # option to make apt less verbose -qq for apt and -o=dpkg for apt forking to dpkg to install package
DEBIAN_FRONTEND=noninteractive
echo "update source list"
apt-get -qq -o=Dpkg::Use-Pty=0 update

echo "nginx + certbot"
apt-get -qq -o=Dpkg::Use-Pty=0 install -y nginx

#install minio, should be from internal source
tmp_dir=$(mktemp -d -t minio-XXXXXX)
cd "$${tmp_dir}"

wget https://dl.min.io/server/minio/release/linux-amd64/minio_20220207081733.0.0_amd64.deb
dpkg -i minio_20220207081733.0.0_amd64.deb

for file in `curl -s https://dl.min.io/server/minio/release/linux-$(dpkg --print-architecture)/ |grep -i deb | cut -d"\"" -f2`;
do
        wget -nv https://dl.min.io/server/minio/release/linux-$(dpkg --print-architecture)/$file
done

sha256sum -c minio_*.sha256sum
if [ $? -eq 0 ]
then
        dpkg -i minio_*.deb
else
        echo "Minio signature error"
        exit 1
fi

#create stepca user
groupadd -g 4000 --system $SYSUSER
useradd \
   -g 4000 \
   -u 4000 \
   --system \
   --shell /bin/false \
   -m --home /etc/minio \
   $SYSGROUP

mkdir -p /etc/minio
chown -R $${SYSUSER}:$${SYSGROUP} /etc/minio

chown -R $${SYSUSER}:$${SYSGROUP} $MINIO_DATA_PATH

cat > "/etc/default/minio" << EOF
MINIO_ROOT_USER="minioadm"
MINIO_ROOT_PASSWORD="minioadm"
MINIO_VOLUMES="$${MINIO_DATA_PATH}/"
MINIO_OPTS="-C /etc/minio --address 127.0.0.1:9000 --console-address 127.0.0.1:9001"
MINIO_BROWSER_REDIRECT_URL=https://$${SERVICEDNSNAME}
MINIO_SERVER_URL=https://api.$${SERVICEDNSNAME}

EOF

cat > "/etc/systemd/system/minio.service" << EOF
[Unit]
Description=MinIO
Documentation=https://docs.min.io
Wants=network-online.target
After=network-online.target
AssertFileIsExecutable=/usr/local/bin/minio

[Service]
WorkingDirectory=$${MINIO_DATA_PATH}/

User=minio
Group=minio

EnvironmentFile=/etc/default/minio
ExecStartPre=/bin/bash -c 'if [ -z "\$${MINIO_VOLUMES}" ]; then echo "Variable MINIO_VOLUMES not set in /etc/default/minio"; exit 1; fi'

ExecStart=/usr/local/bin/minio server \$MINIO_OPTS \$MINIO_VOLUMES

# Let systemd restart this service always
Restart=always

# Specifies the maximum file descriptor number that can be opened by this process
LimitNOFILE=65536

# Disable timeout logic and wait until process is stopped
TimeoutStopSec=infinity
SendSIGKILL=no

# ; Process capabilities & privileges
# ;AmbientCapabilities=CAP_NET_BIND_SERVICE
# ;CapabilityBoundingSet=CAP_NET_BIND_SERVICE
SecureBits=keep-caps
NoNewPrivileges=yes

# ; Sandboxing
ProtectSystem=full
ProtectHome=true
RestrictNamespaces=true
PrivateTmp=true
PrivateDevices=true
ProtectClock=true
ProtectControlGroups=true
ProtectKernelTunables=true
ProtectKernelLogs=true
ProtectKernelModules=true
LockPersonality=true
RestrictSUIDSGID=true
RemoveIPC=true
RestrictRealtime=true
SystemCallFilter=@system-service
SystemCallArchitectures=native
MemoryDenyWriteExecute=true
ReadWriteDirectories=$${MINIO_DATA_PATH}
ReadWriteDirectories=/etc/minio
ReadOnlyDirectories=/etc/default/minio


[Install]
WantedBy=multi-user.target

EOF

systemctl daemon-reload
echo "start minio"
systemctl start minio.service

#configure ngnix to be frontend

#following should be with TLS if we have an ACME we could use it
#setup nginx
echo "setup nginx"
unlink /etc/nginx/sites-enabled/default

#one vhost for service and one for admin of the service 
cat > /etc/nginx/sites-available/$${SERVICEDNSNAME%%.*}-reverse-proxy.conf << EOF
server {
        listen 80;
        server_name $${SERVICEDNSNAME};

        access_log /var/log/nginx/reverse-access.log;
        error_log /var/log/nginx/reverse-error.log;

        # To allow special characters in headers
        ignore_invalid_headers off;
        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;

        location / {
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header Host \$http_host;

        proxy_connect_timeout 300;
        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        chunked_transfer_encoding off;

        proxy_pass http://127.0.0.1:9001; # If you are using docker-compose this would be the hostname i.e. minio
        # Health Check endpoint might go here. See https://www.nginx.com/resources/wiki/modules/healthcheck/
        # /minio/health/live;
        }

}
EOF

cat > /etc/nginx/sites-available/api.$${SERVICEDNSNAME%%.*}-reverse-proxy.conf << EOF
server {
        listen 80;
        server_name api.$${SERVICEDNSNAME};

        access_log /var/log/nginx/reverse-access.log;
        error_log /var/log/nginx/reverse-error.log;

        # To allow special characters in headers
        ignore_invalid_headers off;
        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;

        location / {
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header Host \$http_host;

        proxy_connect_timeout 300;
        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        chunked_transfer_encoding off;

        proxy_pass http://127.0.0.1:9000; # If you are using docker-compose this would be the hostname i.e. minio
        # Health Check endpoint might go here. See https://www.nginx.com/resources/wiki/modules/healthcheck/
        # /minio/health/live;
        }

}
EOF

ln -s /etc/nginx/sites-available/$${SERVICEDNSNAME%%.*}-reverse-proxy.conf /etc/nginx/sites-enabled/$${SERVICEDNSNAME%%.*}-reverse-proxy.conf
ln -s /etc/nginx/sites-available/api.$${SERVICEDNSNAME%%.*}-reverse-proxy.conf /etc/nginx/sites-enabled/api.$${SERVICEDNSNAME%%.*}-reverse-proxy.conf


echo "start nginx"
systemctl start nginx.service

echo "enable at boot services"
systemctl enable minio.service
systemctl enable nginx.service

echo "### MINIO READY ###"