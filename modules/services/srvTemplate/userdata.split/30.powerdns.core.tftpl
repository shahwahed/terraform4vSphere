#!/bin/sh

DBNAME="${dbname}"
DBLOGIN="${dblogin}"
DBPASSWORD="${dbpassword}"
SYSUSER="${sysuser}"
SYSGROUP="${sysgroup}"
APIKEY="${apikey}"
SERVICEDNSNAME="${servicednsname}"

#local varable
DOMAIN="$${SERVICEDNSNAME#*.}"
HOSTNAME="$${SERVICEDNSNAME%%.*}"

#local variable
# get ip addresse from the one who can go out
IPADDR=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')


# -qq -o=Dpkg::Use-Pty=0 # option to make apt less verbose -qq for apt and -o=dpkg for apt forking to dpkg to install package
DEBIAN_FRONTEND=noninteractive

echo "### PowerDNS autoinstallation ###"
echo "installation of requirements"
echo "postgresql installation"
apt-get -qq -o=Dpkg::Use-Pty=0 install -y postgresql postgresql-contrib

echo "powerdns installation"
apt-get -qq -o=Dpkg::Use-Pty=0 install -y pdns-server pdns-backend-pgsql 
apt-get -qq -o=Dpkg::Use-Pty=0 install -y pdns-recursor

echo "nginx"
apt-get -qq -o=Dpkg::Use-Pty=0 install -y nginx

echo "disable systemd resolved"
systemctl disable --now systemd-resolved.service
systemctl stop systemd-resolved.service

echo "## Stop Services ##"
echo "nginx"
systemctl stop nginx.service
echo "pdns"
systemctl stop pdns.service
echo "pdns recursor"
systemctl stop pdns-recursor.service
echo "postgresql"
systemctl stop postgresql.service

echo "postgresql setup"
#grab postgresql version a bit clumsy but did the job : 
PGVERSION=`psql --version | cut -d" " -f3| cut -d"." -f1`
echo password_encryption = scram-sha-256 >> /etc/postgresql/$${PGVERSION}/main/postgresql.conf

echo "local    $DBNAME     $DBLOGIN    scram-sha-256" >> /etc/postgresql/$${PGVERSION}/main/pg_hba.conf

echo "start postgresql service"
systemctl start postgresql.service

echo "role creation for netbox"
su postgres <<EOF
psql -c "CREATE ROLE $DBLOGIN WITH LOGIN PASSWORD '$DBPASSWORD';"
EOF

echo "database creation"
su postgres <<EOF
psql -c "CREATE DATABASE $DBNAME WITH OWNER $DBLOGIN;"
EOF

echo "database schema init"
su postgres <<EOF
export PGPASSWORD=$DBPASSWORD
psql -h 127.0.0.1 -U $DBLOGIN -d $DBNAME -f /usr/share/doc/pdns-backend-pgsql/schema.pgsql.sql
EOF

#powerdns config
echo "### Netbox Setup ###"
echo "setup config file"
rm /etc/powerdns/pdns.d/bind.conf
#setup database for powerdns
cat > "/etc/powerdns/pdns.d/pdns.gpgsql.conf" << EOF
gpgsql-host=127.0.0.1
gpgsql-port=5432
gpgsql-dbname=$DBNAME
gpgsql-user=$DBLOGIN
gpgsql-password=$DBPASSWORD
EOF

#setup main powerdns
cat > "/etc/powerdns/pdns.conf" << EOF
include-dir=/etc/powerdns/pdns.d
setgid=$SYSGROUP
setuid=$SYSUSER
local-address=127.0.0.1
local-port=5300
api=yes
api-key=$APIKEY
webserver=yes
master=yes
#allow-axfr-ips=<slave_ip>/32
#also-notify=<slave_ip>/32
launch=gpgsql
default-soa-content=ns$${HOSTNAME:0-1}.$${DOMAIN}. admin.$${DOMAIN}. 0 10800 3600 604800 3600
EOF

DNSALLOW="`ip -4 r | grep $IPADDR| cut -d" " -f1`"
REVZONE="`echo $IPADDR| sed -r 's/([^.]+)\.([^.]+)\.([^.]+)\.([^ ]+)/\3\.\2\.\1/'`.in-addr.arpa"
#setup recursor
cat > "/etc/powerdns/recursor.conf" << EOF
setgid=$SYSGROUP
setuid=$SYSUSER
local-address=0.0.0.0
allow-from=$${DNSALLOW},127.0.0.1
forward-zones=$${DOMAIN}=127.0.0.1:5300
forward-zones+=$${REVZONE}=127.0.0.1:5300
dnssec=off
EOF

sed -i "s/127.0.0.53/127.0.0.1/g" /etc/resolv.conf
systemctl daemon-reload

systemctl restart postgresql.service
sleep 5s

systemctl restart pdns.service
sleep 5s

systemctl restart pdns-recursor.service
sleep 5s

#powerdns main zone initialization
echo "creation of minimal zone"
pdnsutil create-zone $DOMAIN
pdnsutil add-record $DOMAIN ns$${HOSTNAME:0-1} A $IPADDR
pdnsutil add-record $DOMAIN $HOSTNAME CNAME ns$${HOSTNAME:0-1}.$DOMAIN
echo "create reverse zone"
RDNS="`echo $IPADDR| sed -r 's/([^.]+)\.([^.]+)\.([^.]+)\.([^ ]+)/\3\.\2\.\1/'`"
FRDNS="`echo $IPADDR| sed 's/^.*\.\([^.]*\)$/\1/'`"
pdnsutil create-zone  $RDNS.in-addr.arpa
pdnsutil add-record $RDNS.in-addr.arpa @ NS 86400 ns$${HOSTNAME:0-1}.$${DOMAIN}
pdnsutil add-record $RDNS.in-addr.arpa $FRDNS PTR $${HOSTNAME}.$${DOMAIN}
# Change zone type from NATIVE to MASTER
pdnsutil set-kind $DOMAIN MASTER
pdnsutil set-kind $RDNS MASTER

#following should be with TLS if we have an ACME we could use it
#setup nginx
echo "setup nginx"
unlink /etc/nginx/sites-enabled/default

cat > /etc/nginx/sites-available/dns01-reverse-proxy.conf << EOF
server {
        listen 80;
        #uncomment if you have DNS
        server_name $${HOSTNAME}.$${DOMAIN};

        access_log /var/log/nginx/reverse-access.log;
        error_log /var/log/nginx/reverse-error.log;

        location / {
                    proxy_pass http://127.0.0.1:8081;
  }

}
EOF

ln -s /etc/nginx/sites-available/dns01-reverse-proxy.conf /etc/nginx/sites-enabled/dns01-reverse-proxy.conf

echo "start nginx"
systemctl start nginx.service


echo "start powerdns service"
systemctl start pdns.service
systemctl start pdns-recursor.service

#enable at boot
echo "enable at boot service"
systemctl enable pdns.service
systemctl enable pdns-recursor.service
systemctl enable nginx.service

echo "### POWERDNS READY ###"
